#!groovy
import com.cloudbees.plugins.credentials.domains.Domain;
import com.cloudbees.plugins.credentials.CredentialsScope;
import com.cloudbees.plugins.credentials.SecretBytes;
import hudson.util.Secret

def creds = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
        com.cloudbees.plugins.credentials.common.StandardCredentials.class,
        Jenkins.instance
    )
def key = """${key}
"""

def result = creds.find{
  (it instanceof com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl &&
    it.username == "${username}" &&
    it.id == "${name}" &&
    it.description == "${desc}" &&
    it.password.toString() == "${password}") ||
  (it instanceof com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey &&
    it.username == "${username}" &&
    it.id == "${name}" &&
    ("${password}" == "" || it.passphrase.toString() == "${password}") &&
    it.description == "${desc}" &&
    it.privateKeySource.privateKey.equals(key.trim())) ||
  (it instanceof org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl &&
    it.id == "${name}" &&
    it.description == "${desc}" &&
    it.secret == Secret.fromString("${secret}") ) ||
  (it instanceof org.jenkinsci.plugins.plaincredentials.impl.FileCredentialsImpl &&
    it.id == "${name}" &&
    it.description == "${desc}" &&
    it.fileName == "${fileName}" &&
    it.content.text == """${content}""" )
}

if(result){
    print("EXISTS")
}else{
    domain = Domain.global()
    store = Jenkins.instance.getExtensionList(
      'com.cloudbees.plugins.credentials.SystemCredentialsProvider'
    )[0].getStore()
    if ( "${clazz}" == "org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl" ){
        Secret token = Secret.fromString("${secret}")
        params = 'CredentialsScope.${scope}, ${name}, ${desc}'
        credentials_new = new ${clazz}(
             CredentialsScope.${scope}, "${name}", "${desc}", token
        )
    } else {
        credentials_new = new ${clazz}(
            ${params}
        )
    }
    // remove credentails with same if before created new one, if exists
    def existingCreds = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
        com.cloudbees.plugins.credentials.common.StandardCredentials.class,
        Jenkins.instance).find{it -> it.id.equals("${name}")}
    if(existingCreds){
        store.removeCredentials(domain, existingCreds)
    }
    ret = store.addCredentials(domain, credentials_new)
    if (ret) {
      print("CREATED");
    } else {
        print("FAILED");
    }
}
